import React, { createRef, useState } from 'react';
import { Animated, View, TouchableOpacity, StatusBar, Dimensions, Image, } from 'react-native';
import ImageDetail from './ImageDetail';
var ImageModal = function (props) {
    var imageRef = createRef();
    var imageOpacity = new Animated.Value(1);
    var source = props.source, style = props.style, _a = props.resizeMode, resizeMode = _a === void 0 ? 'contain' : _a, isRTL = props.isRTL, _b = props.renderToHardwareTextureAndroid, renderToHardwareTextureAndroid = _b === void 0 ? true : _b, isTranslucent = props.isTranslucent, _c = props.swipeToDismiss, swipeToDismiss = _c === void 0 ? true : _c, imageBackgroundColor = props.imageBackgroundColor, overlayBackgroundColor = props.overlayBackgroundColor, hideCloseButton = props.hideCloseButton, modalRef = props.modalRef, disabled = props.disabled, modalImageStyle = props.modalImageStyle, modalImageResizeMode = props.modalImageResizeMode, onLongPressOriginImage = props.onLongPressOriginImage, renderHeader = props.renderHeader, renderFooter = props.renderFooter, renderImageComponent = props.renderImageComponent, onTap = props.onTap, onDoubleTap = props.onDoubleTap, onLongPress = props.onLongPress, onOpen = props.onOpen, didOpen = props.didOpen, onMove = props.onMove, responderRelease = props.responderRelease, willClose = props.willClose, onClose = props.onClose;
    var _d = useState({
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    }), originModal = _d[0], setOriginModal = _d[1];
    var _e = useState(false), isOpen = _e[0], setIsOpen = _e[1];
    var updateOriginModal = function () {
        var _a;
        (_a = imageRef.current) === null || _a === void 0 ? void 0 : _a.measureInWindow(function (x, y, width, height) {
            var newY = y;
            if (isTranslucent) {
                newY += StatusBar.currentHeight ? StatusBar.currentHeight : 0;
                StatusBar.setHidden(true);
            }
            var newX = x;
            if (isRTL) {
                newX = Dimensions.get('window').width - width - x;
            }
            setOriginModal({
                width: width,
                height: height,
                x: newX,
                y: newY,
            });
        });
    };
    Dimensions.addEventListener('change', updateOriginModal);
    var handleOpen = function () {
        if (disabled)
            return;
        onOpen === null || onOpen === void 0 ? void 0 : onOpen();
        updateOriginModal();
        setTimeout(function () {
            setIsOpen(true);
        });
        imageOpacity.setValue(0);
    };
    var handleClose = function () {
        imageOpacity.setValue(1);
        setTimeout(function () {
            setIsOpen(false);
            onClose === null || onClose === void 0 ? void 0 : onClose();
        });
    };
    return (<View ref={imageRef} onLayout={function () { }} style={[{ alignSelf: 'baseline', backgroundColor: imageBackgroundColor }]}>
      <Animated.View renderToHardwareTextureAndroid={renderToHardwareTextureAndroid} style={{ opacity: imageOpacity }}>
        <TouchableOpacity activeOpacity={1} style={{ alignSelf: 'baseline' }} onPress={handleOpen} onLongPress={onLongPressOriginImage}>
          {typeof renderImageComponent === 'function' ? (renderImageComponent(props)) : (<Image source={source} style={style} resizeMode={resizeMode}/>)}
        </TouchableOpacity>
      </Animated.View>
      {isOpen && (<ImageDetail source={source} resizeMode={modalImageResizeMode !== null && modalImageResizeMode !== void 0 ? modalImageResizeMode : resizeMode} imageStyle={modalImageStyle} ref={modalRef} isOpen={isOpen} renderToHardwareTextureAndroid={renderToHardwareTextureAndroid} isTranslucent={isTranslucent} origin={originModal} backgroundColor={overlayBackgroundColor} swipeToDismiss={swipeToDismiss} hideCloseButton={hideCloseButton} renderHeader={renderHeader} renderFooter={renderFooter} renderImageComponent={renderImageComponent} onTap={onTap} onDoubleTap={onDoubleTap} onLongPress={onLongPress} didOpen={didOpen} onMove={onMove} responderRelease={responderRelease} willClose={willClose} onClose={handleClose}/>)}
    </View>);
};
export default ImageModal;
export { ImageDetail };
//# sourceMappingURL=index.js.map